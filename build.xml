<project name="cascading_ext" default="dist" basedir=".">

  <property name="version" value="0.1.0" />

  <property environment="env" />

  <property name="src" location="src" />
  <property name="src.java" location="${src}/java" />
  <property name="build" location="build" />
  <property name="build.classes" location="${build}/classes" />
  <property name="src.test" location="test" />
  <property name="build.test" location="${build}/test" />
  <property name="lib" location="lib" />

  <property name="test.junit.output.format" value="plain"/>
  <property name="test.timeout" value="300000"/>
  <property name="test.src.dir" location="${basedir}/test/java"/>
  <property name="test.log.dir" value="${build.test}/log"/>
  <property name="test.port" value="9090" />

  <property name="jar.file" location="${build}/cascading_ext.jar" />

  <fileset id="jars" dir="${lib}" includes="*.jar" />
  <property name="jobjar.tmp.dir" value="/tmp/cascading_ext_build/jobjar-tmp"/>

  <path id="compile.classpath">
    <fileset id="jars" dir="${lib}" includes="**/*.jar" />
  </path>

  <target name="classpath">
    <property name="cp" refid="test.run.classpath"/>
    <pathelement location="${env.HADOOP_HOME}"/>
    <pathelement location="${env.HADOOP_CONF_DIR}"/>
    <echo message="Classpath: ${cp}"/>
  </target>

  <path id="test.classpath">
    <path refid="compile.classpath" />
    <pathelement location="${jar.file}" />
    <pathelement location="${build.test}" />
  </path>

  <target name="clean" depends="clean-javadoc" description="Trash all build outputs">
    <delete dir="${build}" />
    <delete dir="${build.test}" />
  </target>

  <target name="init">
    <mkdir dir="${build}"/>
    <mkdir dir="${build.classes}"/>
  </target>

  <target name="compile" depends="init,no-debug-pipes">
    <javac srcdir="${src.java}" destdir="${build.classes}" debug="true" classpathref="compile.classpath" />
  </target>

  <target name="init-test">
    <mkdir dir="${build.test}" />
  </target>

  <target name="compile-test" depends="dist,init-test">
    <javac debug="true" srcdir="${test.src.dir}" destdir="${build.test}" classpathref="test.classpath" />
  </target>

  <target name="ensure-specific-test-exists" if="testcase">
    <fileset id="selected.test.case" dir="${test.src.dir}" includes="**/${testcase}.java" />
    <pathconvert refid="selected.test.case" property="testcase.exists" setonempty="false" />
    <fail unless="testcase.exists">Specified testcase was not found!</fail>
  </target>

  <target name="ensure-specific-test-package-exists" if="testpackage">
    <fileset id="selected.test.package" dir="${test.src.dir}" includes="**/${testpackage}/**/Test*.java" />
    <pathconvert refid="selected.test.package" property="testpackage.exists" setonempty="false" />
    <fail unless="testpackage.exists">Specified package does not exist or contains no tests!</fail>
  </target>

  <target name="test" depends="compile-test,ensure-specific-test-exists,ensure-specific-test-package-exists" description="Run the unit test suite">
    <mkdir dir="${test.log.dir}"/>

    <condition property="testpackage" value="${testpackage}" else="">
      <isset property="testpackage" />
    </condition>

    <junit
      printsummary="yes" showoutput="${test.output}"
      haltonfailure="no" fork="yes" maxmemory="512m"
      errorProperty="tests.failed" failureProperty="tests.failed"
      timeout="${test.timeout}"
    >
      <sysproperty key="build.test" value="${build.test}"/>
      <sysproperty key="test.port" value="${test.port}" />
      <classpath refid="test.classpath"/>
      <formatter type="${test.junit.output.format}" />


      <batchtest todir="${build.test}/log" unless="testcase">
        <fileset dir="${test.src.dir}" includes="**/${testpackage}/**/Test*.java" />
      </batchtest>

      <batchtest todir="${test.log.dir}" if="testcase">
        <fileset dir="${test.src.dir}" includes="**/${testcase}.java" />
      </batchtest>
    </junit>
    <fail if="tests.failed">Tests failed!</fail>
  </target>

  <target name="capture-git-commit">
    <exec executable="/bin/sh" failonerror="true">
      <arg line="src/bash/capture_git_commit.sh"/>
    </exec>
  </target>

  <target name="capture-version">
    <echo file="${build}/version.txt" message="${version}"/>
  </target>

  <target name="dist" depends="compile,capture-git-commit,capture-version" description="Build a distributable jar">
    <jar jarfile="${jar.file}">
      <fileset dir="${build.classes}">
        <include name="**/*.class" />
      </fileset>
      <fileset dir="${build}">
        <include name="*.txt" />
      </fileset>
      <fileset dir="${src.java}">
        <include name="**/*.*" />
      </fileset>
    </jar>
  </target>

  <target name="javadoc" depends="clean-javadoc" description="Generate Javadoc">
    <mkdir dir="${doc}"/>
    <javadoc sourcepath="${src.java}" destdir="${doc}"/>
  </target>

  <target name="clean-javadoc" description="Clean Javadoc">
    <delete includeemptydirs="true" dir="${doc}"/>
  </target>

  <!-- Debug pipes have a nasty habit of filling up all the logs on a cluster with junk
       if accidentally left in production.  This target makes sure the pipe was intentional-->
  <target name="no-debug-pipes" description="--> fail the build if there are any debug pipes: to override use -Ddebugpipe=true" unless="debugpipe">
    <exec dir="." executable="/bin/sh" failonerror="true">
      <arg value="-c"/>
      <arg value="test '0' = `find . -name *.java | xargs cat | egrep -c 'cascading.operation.Debug'`"/>
    </exec>
  </target>

  <target name="jobjar" depends="dist" description="--> build a job jar (with all dependency classes)">
    <delete file="${build}/cascading_ext.job.jar" />
    <delete dir="${jobjar.tmp.dir}"/>
    <mkdir dir="${jobjar.tmp.dir}" />
    <unjar dest="${jobjar.tmp.dir}" overwrite="false">
      <fileset refid="jars"/>
    </unjar>
    <copy todir="${jobjar.tmp.dir}" >
      <fileset dir="${build.classes}"/>
    </copy>
    <delete quiet="true">
      <fileset dir="${jobjar.tmp.dir}/META-INF" includes="**/*.DSA,**/*.RSA,**/*.SF"  />
    </delete>
    <jar jarfile="${build}/cascading_ext.job.jar"
      basedir="${jobjar.tmp.dir}" />
    <delete dir="${jobjar.tmp.dir}"/>
  </target>


</project>
